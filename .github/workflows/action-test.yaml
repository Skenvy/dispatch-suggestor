name: Action Tests
on:
  pull_request:
defaults:
  run:
    shell: bash
permissions: {}
jobs:
  test:
    permissions:
      actions: read
      contents: read
      pull-requests: write
    name: TEST -- ${{ matrix.job-name }}
    runs-on: 'ubuntu-latest'
    # What are we testing for here? Well the repo about is...
    #
    # Suggests dispatchable workflows for a branch that would otherwise trigger
    # the dispatchable workflows from pushes to the trunk.
    #
    # So we want to try the action in a variety of ways. Version 1 functionality
    # should be: IFF a push to the "trunk-branch" would trigger a dispatchable
    # workflow, that wasn't already triggered by a non-trunk-branch push to a PR
    # branch, then we want that to be commented. It's fine if the workflow was
    # triggered by the pull_request event on the same branch or paths conditions
    # so long as it was not via the push event.
    strategy:
      fail-fast: false
      matrix:
        include:
        # Initially, three test cases to verify the checkout-root behaves ok.
        # These all only inject '_test/a/*' so should only be triggering one wf.
        # (default path, log everything)
        - job-name: DEFAULTISH
          trunk-branch: fake_trunk
          checkout-root: '.' # default
          list-workflows-pagination-limit: 100
          comment-unique-identifier: 'ACTION-TEST-DEFAULTISH'
          inject-diff-paths: '_test/a/some/fake/file/path'
          log-event-payload: true
          log-workflow-triggers: true
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-paths-ignore-def.yml,
            .github/workflows/uut-on-push-branches-paths-ignore-ghi.yml,
            .github/workflows/uut-on-push-branches.yml]
          vvv: false
          DIT-only-use-injected-paths: false
        # (non-default checkout-root internal)
        - job-name: INTERNAL CHECKOUT ROOT
          trunk-branch: fake_trunk
          checkout-root: 'test/integration/example'
          list-workflows-pagination-limit: 100
          comment-unique-identifier: 'ACTION-TEST-INTERNAL_CHECKOUT_ROOT'
          inject-diff-paths: '_test/a/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-paths-ignore-def.yml,
            .github/workflows/uut-on-push-branches-paths-ignore-ghi.yml,
            .github/workflows/uut-on-push-branches.yml]
          vvv: false
          DIT-only-use-injected-paths: false
        # (non-default checkout-root external)
        - job-name: EXTERNAL CHECKOUT ROOT
          trunk-branch: fake_trunk
          checkout-root: '../dispatch-suggestor/test/integration/example'
          list-workflows-pagination-limit: 100
          comment-unique-identifier: 'ACTION-TEST-EXTERNAL_CHECKOUT_ROOT'
          inject-diff-paths: '_test/a/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-paths-ignore-def.yml,
            .github/workflows/uut-on-push-branches-paths-ignore-ghi.yml,
            .github/workflows/uut-on-push-branches.yml]
          vvv: false
          DIT-only-use-injected-paths: false
        # (default checkout root, but a different trunk name)
        - job-name: BRANCHES IGNORE
          trunk-branch: _some_other_fake_trunk_name
          checkout-root: '.'
          list-workflows-pagination-limit: 100
          comment-unique-identifier: 'ACTION-TEST-BRANCHES_IGNORE'
          inject-diff-paths: '_test/a/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-ignore.yml]
          vvv: false
          DIT-only-use-injected-paths: false
        # Now test the paths summon their respective workflows independently
        - job-name: PATHS ABC
          trunk-branch: fake_trunk
          checkout-root: '.'
          list-workflows-pagination-limit: 1000
          comment-unique-identifier: 'ACTION-TEST-PATHS_ABC'
          inject-diff-paths: '_test/abc/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-paths-abc.yml,
            .github/workflows/uut-on-push-branches-paths-ignore-def.yml,
            .github/workflows/uut-on-push-branches-paths-ignore-ghi.yml]
          vvv: false
          DIT-only-use-injected-paths: false
        - job-name: PATHS XYZ
          trunk-branch: fake_trunk
          checkout-root: '.'
          list-workflows-pagination-limit: 1000
          comment-unique-identifier: 'ACTION-TEST-PATHS_XYZ'
          inject-diff-paths: '_test/xyz/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-paths-ignore-def.yml,
            .github/workflows/uut-on-push-branches-paths-ignore-ghi.yml,
            .github/workflows/uut-on-push-branches-paths-xyz.yml]
          vvv: false
          DIT-only-use-injected-paths: false
        # Test the ignore paths options.
        - job-name: PATHS IGNORE DEF
          trunk-branch: fake_trunk
          checkout-root: '.'
          list-workflows-pagination-limit: 0
          comment-unique-identifier: 'ACTION-TEST-PATHS_IGNORE_DEF'
          inject-diff-paths: '_test/def/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-paths-ignore-ghi.yml]
          vvv: false
          DIT-only-use-injected-paths: true
        - job-name: PATHS IGNORE GHI
          trunk-branch: fake_trunk
          checkout-root: '.'
          list-workflows-pagination-limit: 0
          comment-unique-identifier: 'ACTION-TEST-PATHS_IGNORE_GHI'
          inject-diff-paths: '_test/ghi/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-paths-ignore-def.yml]
          vvv: false
          DIT-only-use-injected-paths: true
        - job-name: INPUTS REQUIRED OR NOT
          trunk-branch: fake_trunk
          checkout-root: '.'
          list-workflows-pagination-limit: 0
          comment-unique-identifier: 'ACTION-TEST-INPUTS_REQUIRED_OR_NOT'
          inject-diff-paths: '_test/jkl/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: >-
            [.github/workflows/uut-on-push-branches-paths-ignore-def.yml,
            .github/workflows/uut-on-push-branches-paths-ignore-ghi.yml,
            .github/workflows/uut-on-push-inputs-all-required.yml,
            .github/workflows/uut-on-push-inputs-none-required.yml,
            .github/workflows/uut-on-push-inputs-some-required.yml]
          vvv: false
          DIT-only-use-injected-paths: true
        - job-name: EMPTY SET OF DISPATCHABLES
          trunk-branch: fake_trunk
          checkout-root: '.'
          # a limit of 1 means this run should only ever get THIS workflow in
          # its list internally, which wont match with any because this isn't
          # dispatchable
          list-workflows-pagination-limit: 1
          comment-unique-identifier: 'ACTION-TEST-EMPTY_SET_OF_DISPATCHABLES'
          inject-diff-paths: '_test/nothing/some/fake/file/path'
          log-event-payload: false
          log-workflow-triggers: false
          expected-dispatchable-workflows: '[]'
          vvv: false
          DIT-only-use-injected-paths: true
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        sparse-checkout: |
          .github/workflows/*.y*ml
          .github/workflows/config/*.y*ml
          action.yml
          dist/action.js
          package.json
          test/integration/*/.github/workflows/*.y*ml
        sparse-checkout-cone-mode: false
    - name: List the local workflows
      run: ls -liath .github/workflows/
    # Test the action by calling it with multiple inputs.
    - name: Use the action
      uses: ./
      id: test-step
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        trunk-branch: ${{ matrix.trunk-branch }}
        checkout-root: ${{ matrix.checkout-root }}
        list-workflows-pagination-limit: ${{ matrix.list-workflows-pagination-limit }}
        comment-unique-identifier: ${{ matrix.comment-unique-identifier }}
        inject-diff-paths: ${{ matrix.inject-diff-paths }}
        log-event-payload: ${{ matrix.log-event-payload }}
        log-workflow-triggers: ${{ matrix.log-workflow-triggers }}
        vvv: ${{ matrix.vvv }}
        DIT-only-use-injected-paths: ${{ matrix.DIT-only-use-injected-paths }}
    - name: Log -- List changed files
      run: echo "${{ steps.test-step.outputs.list-of-changed-files }}"
    - name: Log -- List dispatchable workflows
      run: echo "${{ steps.test-step.outputs.list-of-dispatchable-workflows }}"
    - name: Eval -- dispatchable workflows are what were expected?
      run: >-
        [[ "${{ steps.test-step.outputs.list-of-dispatchable-workflows }}"
        == "$(echo "${{ matrix.expected-dispatchable-workflows }}"
        | sed 's/ //g')" ]]
        && echo "Dispatchable workflows match expected"
        || (echo "Dispatchable workflows mismatch" && exit 1)
    # To eval the messages in the comment bodies, we need to disable star globs
    # (e.g. `set -f`). We also need to pipe the gh api jq output to `tr -d '\r'`
    # to remove the carriage returns that comments made on it seem to have.
    - name: Eval -- comment left by action is as-expected
      env:
        GH_TOKEN: ${{ github.token }}
        HEAD_REF: ${{ github.event.pull_request.head.ref }}
      run: |-
        # Set un-star-globbing, and replace template vars in expected
        CONFIG_FILE=".github/workflows/config/uut-expected-comment-blocks.yml"
        set -f
        sed -i "s|{{ github.run_id }}|${{ github.run_id }}|g" "$CONFIG_FILE"
        sed -i "s|{{ github.event.pull_request.head.ref }}|${{ env.HEAD_REF }}|g" "$CONFIG_FILE"
        # Get comment left by API
        contentsOfCommentFromApiFoundByUniqueIdentifier=\
        "$(gh api /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/issues/${{ github.event.number }}/comments \
        --jq '.[] | select(.body | contains("${{ matrix.comment-unique-identifier }}")) | .body' | tr -d '\r')"
        # Read the expected comment in the config
        expectedContentsOfCommentFromConfigFile=\
        "$(yq -r '.[] | select(.["comment-unique-identifier"] == "${{ matrix.comment-unique-identifier }}") | .expected_body' $CONFIG_FILE)"
        # Compare them.
        [[ "$contentsOfCommentFromApiFoundByUniqueIdentifier" \
        == "$expectedContentsOfCommentFromConfigFile" ]] \
        && echo "Comment left was as expected" \
        || (echo "Comment mismatch!" && exit 1)
